// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdb\x72\x13\x39\x13\xbe\xcf\x53\x74\xe0\xe2\x87\x2a\x78\x81\xb9\x0b\x06\xfe\xcd\x16\x6c\xbc\x09\x87\x0b\x8a\x72\xb5\x47\x6d\x8f\x0a\x8d\x7a\x90\x7a\x62\xa6\xb6\xf6\xdd\xb7\x74\xf0\x78\x7c\xc4\x49\x0c\xec\xe6\x82\xc2\x3a\x7c\xfd\x75\x4b\xdd\xfa\xa6\xa5\x6b\x08\x46\x5c\xd7\xe4\x4a\x9a\x8c\x2a\x2a\xbf\x70\x2b\x93\x1b\x41\x27\x63\x83\x25\x5d\x39\x45\x6e\x72\x4d\xbe\x35\x02\x7f\x9d\x01\x00\xb4\xad\x56\x05\xdc\x88\xd3\x76\x7e\x7e\xf6\xf7\xd9\xe3\x1d\x00\xab\xbd\x23\xb6\x42\xdf\x04\x1c\x35\x8e\x3c\x59\xf1\x20\x15\x81\x4b\x88\x3c\x8b\xbf\xca\xd6\x39\xb2\x02\x4f\x5c\x6b\xad\xb6\xf3\xa7\xd0\x04\x00\xe0\x80\x00\x75\x2b\x28\x9a\xed\xd9\x1e\xb6\xdb\xc6\x12\xd1\xc7\xf0\xae\x22\x18\xa1\x13\x90\x0a\x05\xb4\x87\x39\x6b\x3b\x07\x61\x98\x52\x32\xa1\xe2\xca\x12\x9d\x14\x2b\xe4\x97\x54\xb2\x43\x21\x15\xf6\x0e\xa0\xd2\x8e\xcc\x4a\x5b\x28\xd1\x2f\x39\x6a\x0f\x68\x1c\xa1\xea\x86\xb8\x71\xee\xd2\xce\xd8\x17\xfb\x78\xab\xab\x7e\x4d\xb6\x74\x23\x28\x04\x8a\x1a\xb2\x2a\xb0\x65\x1b\x63\xe4\xe3\x30\xcf\xa0\xc1\xae\x0e\xc1\x42\xab\xd6\xc2\xf4\x3c\x2f\xa9\xb1\x83\x92\xad\xa0\xb6\x80\x4a\xe9\x10\x3a\x34\xa0\x7b\x13\x71\xd9\x5e\x42\x91\x4f\xe4\x30\x89\xff\x9e\x67\x5a\x17\xd0\x5a\xfd\xb5\x25\xd0\x0a\x66\xec\x22\xa7\xc6\x71\x49\xde\xef\xbc\x16\x67\xfb\x2f\xc6\xc0\x67\x78\x9e\x88\x01\x4e\xb9\x95\x04\x3a\x88\x72\x98\x97\xae\xd1\x25\x1a\xd3\x81\xaf\x78\x61\x43\x3c\x10\x7c\x5b\x12\x79\x0f\x0d\xce\xe9\xe0\xbd\x18\xda\x4a\xd7\x22\xc7\x2f\x1f\x4b\xfe\xfb\x74\x28\x1a\xe3\xd5\x8e\xf3\xcf\x09\x63\x03\xba\xd8\xc0\x40\xb7\x65\x3e\xef\xa4\x1a\xb5\xe9\xcd\xe6\xbf\x41\xd4\xa2\x2f\x07\xcf\x66\xc0\x26\x7b\x34\x47\xa1\x05\x76\xc5\x16\xde\xc0\xdd\xb1\xe3\x5b\xad\xc8\x15\x6b\x93\x35\x49\xc5\xaa\xd8\x66\x12\xfe\x8f\x35\xb7\x56\x06\x93\x3d\xab\xb1\xd3\x65\xbe\x18\xa2\xc5\x50\xb1\xdb\x97\x33\x6d\x85\xdc\x2c\x5c\xd1\x23\x2f\x5b\x76\xc8\x62\x4d\xc5\x56\x54\x8e\xc4\x98\x7c\x44\x2d\xa0\xeb\xc6\x50\x1d\xeb\xcd\xcf\xb6\xfd\x9a\xdd\xa8\xf5\xc2\x75\xa8\x0b\xbf\x86\xc6\x4d\x5b\x86\xc4\xfc\x55\xe6\x5f\xa3\x36\xa4\x4e\x65\x3d\x8c\x38\x42\xcf\xf6\xe8\xa2\x95\x19\x5c\xc7\x5d\xf7\x08\x5f\xc5\x8b\xcb\x99\xc3\x9a\x4e\xe9\xc3\xfb\xeb\x37\x0f\x38\xd1\x8a\x17\xbf\xbd\x7b\xfb\xe6\x94\x84\x02\xde\xfd\x19\x5d\x93\xd2\x8e\xca\x93\xa5\xda\x49\x42\xf4\x11\x8d\x21\xc9\x25\xf2\x94\xcc\x1e\x25\xe4\xfe\xf5\x4d\x95\x33\x09\x8b\x05\x7a\x28\x2b\xf6\x64\xa1\x71\x74\xab\xb9\xf5\xa6\x7b\x34\xac\xbe\x6f\x73\x9d\x5d\x43\x0c\x15\xdc\xd5\x51\xda\x80\x25\x52\xa4\x82\x32\x29\x1d\x05\x1e\xd8\x5b\x6a\x7d\xd4\x2c\x15\x41\x76\xeb\x9a\xbe\xb6\xe4\x05\x2e\xc6\x97\x6b\x46\xf2\xf8\xc5\xf8\xf2\x98\x3c\x19\x6f\x6e\xba\x4b\xc0\xb7\x36\xe7\xb8\x3d\x1a\x25\xe1\x91\x44\xde\xef\x37\x57\x7f\x00\xd9\x92\x83\x6b\x39\x60\x0a\x05\x7b\xfd\xb0\xcf\xa1\xb4\xf6\x25\x0a\x6e\x84\x6c\x3f\xbc\x22\x41\x6d\xfc\x77\xa1\xf3\xba\xa3\x71\xb9\x09\xe7\xf3\x7d\xdc\xbc\x6e\x03\xf7\xaa\xc9\xea\x8b\xac\x6a\x58\xc7\xd3\xa4\xa4\x9f\x78\x1a\x2c\x86\xa3\x45\x08\xd1\xae\xd0\x0a\x78\xf2\x5e\xb3\x7d\x06\x96\xc3\x0f\x01\x9d\x04\xf2\x62\xfd\xf2\x29\x26\x6f\xff\x17\x44\xf5\xd7\x56\x3b\x1a\x22\xdc\xa2\xd1\x2a\xde\xa9\x65\x28\xd3\xc4\x87\x7e\x7c\x90\x63\x89\xe4\xab\x25\x37\x61\x08\x0a\x1d\x4a\x0e\x79\x23\xa4\x7a\x83\xc2\x09\x6d\x39\xf3\xa0\x3c\x1d\xb3\x97\x1f\x5e\x3c\xc2\xc0\x18\x43\x09\x17\x72\xbe\x38\x2c\xf0\xf2\x9b\xc1\xae\x9e\xf4\x7b\xce\x3f\x07\xc7\xee\xac\x60\xd6\x5e\x9e\x4c\x75\xf9\x78\xe5\xa0\x07\x65\x74\x8f\xe7\x34\x41\x4e\x5e\x39\xc7\xf7\xd1\x15\xc7\x11\xbb\x3f\xaf\x9c\x18\xff\x56\x7a\x23\xb4\x25\x19\x52\x2f\xba\x07\x68\xb3\x9f\x14\xc3\xff\x04\xd7\xf0\x8d\xb3\x2a\x2a\x3f\xf0\xd8\xc3\xd0\xaa\xaa\xa5\x56\xc4\xf0\x81\x0b\xdf\x5a\x1f\x36\xe6\xef\x52\x94\xd6\xd3\x3e\x73\xf8\x42\xdd\x7a\x2d\xb9\x45\xd3\x52\x01\x9f\xf2\x58\x2c\x0e\xf4\x4d\xc8\x2a\x88\x76\xfe\x6c\xc9\x75\x7d\xe3\xe1\x32\xbe\x24\xb1\x32\x63\x29\xfa\x96\xd6\xbe\xd4\x87\x9f\xcd\xdb\xfc\x2e\xe2\x86\x15\xcb\x02\x5e\x30\x1b\x42\x7b\xbe\x67\xc3\x28\x75\x4f\x72\xf3\xe3\xf0\xdb\x9f\x17\x9d\x6f\xd2\x7f\x9b\x7b\x2c\xbd\x07\xb1\x05\xe4\x01\xc1\xd2\x62\x49\x38\xb6\x1c\x16\xda\x18\x70\x94\xfc\xa1\x6f\xda\x4b\x6a\x52\xd0\x3e\x7f\x36\x9a\x49\x4f\x1c\x49\xeb\xec\x7b\x67\xfa\x00\x3f\xdd\xc5\x79\x77\x0f\x6a\xd9\x8d\x48\x29\xe2\xa3\x60\xca\xcd\xa3\xdc\x3b\xda\x15\xe9\x67\xd0\xb0\xf7\x7a\x6a\x28\x3c\xa8\xa9\x4d\xa2\x7d\x7c\x64\x67\xda\xa2\xd9\x17\xd8\x68\x64\xef\x49\x3c\x86\x91\x21\x74\x49\x34\x18\xf4\x02\x5e\xd8\x91\xba\xc3\x59\x47\x80\x03\x06\xfe\x4f\x72\x18\x3e\xf9\x12\xce\x85\xac\x6f\x1d\xf9\xa4\x48\x57\x0d\xa3\x1a\xcb\x4a\xdb\xdc\xaa\x21\xe5\x83\xb4\xb0\x30\x35\x5c\x7e\x59\x26\xd7\x36\xad\x6b\x9a\x39\xf2\xd5\x90\xd8\x51\x97\x6a\x83\x74\xcd\x3e\x68\x94\x32\x9c\xce\x36\xe9\x69\x07\x0b\xd4\xf1\xf6\x2c\xc5\xd5\x3a\x65\xe1\x25\xeb\x67\x29\x9b\x66\xec\xe8\xce\xd4\x5f\xe4\xf5\x47\xe7\xc5\x3f\x01\x00\x00\xff\xff\x7d\xf9\x5e\xe4\x14\x15\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
